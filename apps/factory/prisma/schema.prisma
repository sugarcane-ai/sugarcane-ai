generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
  binaryTargets   = ["native", "linux-musl"]
}

generator zod {
  provider               = "zod-prisma-types"
  output                 = "../src/generated/prisma-client-zod.ts"
  createInputTypes       = "false"
  addInputTypeValidation = "false"
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [timescaledb, uuid_ossp(map: "uuid-ossp"), vector]
}

model Account {
  id                String   @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt @map("updated_at")
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt @map("updated_at")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PromptVariables {
  id               String         @id @default(uuid())
  userId           String
  promptPackageId  String
  promptTemplateId String
  promptVersionId  String
  name             String
  majorVersion     String
  minorVersion     String
  variables        Json
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt @map("updated_at")
  promptPackage    PromptPackage  @relation(fields: [promptPackageId], references: [id])
  promptTemplate   PromptTemplate @relation(fields: [promptTemplateId], references: [id])
  PromptVersion    PromptVersion  @relation(fields: [promptVersionId], references: [id])

  @@unique([promptTemplateId, majorVersion, minorVersion, variables])
}

model PromptPackage {
  id              String            @id @default(uuid())
  userId          String
  name            String
  description     String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt @map("updated_at")
  visibility      PackageVisibility @default(PUBLIC)
  User            User              @relation(fields: [userId], references: [id])
  templates       PromptTemplate[]
  PromptVariables PromptVariables[]
  PromptVersion   PromptVersion[]

  @@unique([userId, name])
}

model PromptTemplate {
  id               String            @id @default(uuid())
  userId           String
  promptPackageId  String
  name             String
  description      String
  previewVersionId String?           @unique
  releaseVersionId String?           @unique
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt @map("updated_at")
  modelType        ModelType         @default(TEXT2TEXT)
  promptPackage    PromptPackage     @relation(fields: [promptPackageId], references: [id])
  User             User              @relation(fields: [userId], references: [id])
  previewVersion   PromptVersion?    @relation("previewVersion", fields: [previewVersionId], references: [id], map: "previewVersion")
  releaseVersion   PromptVersion?    @relation("releaseVersion", fields: [releaseVersionId], references: [id], map: "releaseVersion")
  PromptVariables  PromptVariables[]
  versions         PromptVersion[]   @relation("template")

  @@unique([promptPackageId, name])
}

model PromptVersion {
  id               String            @id @default(uuid())
  userId           String
  version          String
  template         String
  inputFields      String[]
  templateFields   String[]
  llmProvider      String
  llmModel         String
  llmConfig        Json
  lang             String[]
  changelog        String?
  publishedAt      DateTime?
  outAccuracy      Float?
  outLatency       Float?
  outCost          Float?
  promptPackageId  String
  promptTemplateId String
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt @map("updated_at")
  forkedFromId     String?
  llmModelType     ModelType         @default(TEXT2TEXT)
  previewVersion   PromptTemplate?   @relation("previewVersion")
  releaseVersion   PromptTemplate?   @relation("releaseVersion")
  PromptVariables  PromptVariables[]
  promptPackage    PromptPackage     @relation(fields: [promptPackageId], references: [id])
  promptTemplate   PromptTemplate    @relation("template", fields: [promptTemplateId], references: [id])
  user             User              @relation(fields: [userId], references: [id])

  @@unique([promptPackageId, promptTemplateId, version])
}

model User {
  id             String           @id @default(uuid())
  name           String?
  email          String?          @unique
  emailVerified  DateTime?
  image          String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt @map("updated_at")
  username       String?          @unique
  accounts       Account[]
  promptPackages PromptPackage[]
  PromptTemplate PromptTemplate[]
  PromptVersion  PromptVersion[]
  sessions       Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@unique([identifier, token])
}

model PromptLog {
  id                String            @id @default(uuid())
  inputId           String?
  version           String
  prompt            String
  completion        String
  llmProvider       String
  llmModel          String
  llmConfig         Json
  latency           Int
  prompt_tokens     Int
  completion_tokens Int
  total_tokens      Int
  extras            Json
  labelledState     LabelledState     @default(UNLABELLED)
  finetunedState    FinetunedState    @default(UNPROCESSED)
  promptPackageId   String
  promptTemplateId  String
  promptVersionId   String
  createdAt         DateTime          @default(now()) @map("created_at")
  updatedAt         DateTime          @updatedAt @map("updated_at")
  environment       PromptEnvironment @default(DEV)
  userId            String
  llmModelType      ModelType         @default(TEXT2TEXT)
}

enum LabelledState {
  UNLABELLED
  SELECTED
  REJECTED
  NOTSURE
}

enum PackageVisibility {
  PUBLIC
  PRIVATE
}

enum FinetunedState {
  UNPROCESSED
  PROCESSED
}

enum PromptEnvironment {
  DEV
  PREVIEW
  RELEASE
}

enum ModelType {
  TEXT2TEXT
  TEXT2IMAGE
}
